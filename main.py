#!/usr/bin/env python
# -*- coding: utf-8 -*-

import asyncio
import logging
import json
import os
import time
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

from config import TOKEN, ADMIN_IDS, CRYPTOCLOUD_API_KEY, CRYPTOCLOUD_SHOP_ID
from database import Database
from games import Games
from payment import Payment
from states import UserStates
from keyboards import Keyboards
from language import Language

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
games = Games(db)
payment = Payment(db, CRYPTOCLOUD_API_KEY, CRYPTOCLOUD_SHOP_ID)
kb = Keyboards()
lang = Language()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if not db.user_exists(user_id):
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
        db.add_user(user_id, username)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
        await message.answer("üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose language", 
                             reply_markup=kb.language_keyboard())
        
        await UserStates.language.set()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_language = db.get_user_language(user_id)
        await show_main_menu(message, user_language)
        await state.finish()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data in ['ru', 'en'], state=UserStates.language)
async def process_language(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    selected_language = callback_query.data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    db.set_user_language(user_id, selected_language)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏—è
    welcome_text = lang.get_message('welcome', selected_language)
    terms_text = lang.get_message('terms', selected_language)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=welcome_text
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–±–∞–ª–∞–Ω—Å
    db.update_demo_balance(user_id, 10.0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    terms_msg = await bot.send_message(
        callback_query.message.chat.id,
        terms_text,
        reply_markup=kb.terms_keyboard(selected_language)
    )
    
    await UserStates.terms.set()

# –ü—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π
@dp.callback_query_handler(lambda c: c.data == 'accept_terms', state=UserStates.terms)
async def accept_terms(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è
    db.set_terms_accepted(user_id, True)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback_query.message, user_language)
    await state.finish()

# –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message, language):
    menu_text = lang.get_message('main_menu', language)
    demo_balance = db.get_demo_balance(message.chat.id)
    real_balance = db.get_real_balance(message.chat.id)
    
    menu_text += f"\n\n{lang.get_message('demo_balance', language)}: ${demo_balance:.2f}"
    menu_text += f"\n{lang.get_message('real_balance', language)}: ${real_balance:.2f}"
    
    await message.answer(
        menu_text,
        reply_markup=kb.main_menu_keyboard(language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'play')
async def process_play(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('select_mode', user_language),
        reply_markup=kb.game_mode_keyboard(user_language)
    )

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
@dp.callback_query_handler(lambda c: c.data in ['demo_mode', 'real_mode'])
async def process_game_mode(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    game_mode = callback_query.data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    await state.update_data(game_mode=game_mode)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('select_game', user_language),
        reply_markup=kb.games_keyboard(user_language)
    )
    
    await UserStates.game_selection.set()

# –í—ã–±–æ—Ä –∏–≥—Ä—ã
@dp.callback_query_handler(lambda c: c.data in ['guess_number', 'coin_flip', 'find_card', 'dice', 'wheel'], state=UserStates.game_selection)
async def process_game_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    game_choice = callback_query.data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
    await state.update_data(game_choice=game_choice)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('enter_bet', user_language),
        reply_markup=kb.bet_amounts_keyboard(user_language)
    )
    
    await UserStates.bet_amount.set()

# –í—ã–±–æ—Ä —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('bet_'), state=UserStates.bet_amount)
async def process_bet_amount(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    bet_amount = float(callback_query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    game_mode = state_data.get('game_mode')
    game_choice = state_data.get('game_choice')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    sufficient_funds = False
    if game_mode == 'demo_mode':
        sufficient_funds = db.get_demo_balance(user_id) >= bet_amount
    else:  # real_mode
        sufficient_funds = db.get_real_balance(user_id) >= bet_amount
    
    if not sufficient_funds:
        insufficient_funds_text = lang.get_message('insufficient_funds', user_language)
        
        if game_mode == 'real_mode':
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=insufficient_funds_text,
                reply_markup=kb.deposit_keyboard(user_language)
            )
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=insufficient_funds_text,
                reply_markup=kb.back_to_menu_keyboard(user_language)
            )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
    await state.update_data(bet_amount=bet_amount)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    if game_choice == 'guess_number':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=lang.get_message('choose_number', user_language),
            reply_markup=kb.guess_number_keyboard()
        )
        await UserStates.game_process.set()
    
    elif game_choice == 'coin_flip':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=lang.get_message('choose_side', user_language),
            reply_markup=kb.coin_flip_keyboard(user_language)
        )
        await UserStates.game_process.set()
    
    elif game_choice == 'find_card':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=lang.get_message('find_card_instruction', user_language),
            reply_markup=kb.find_card_keyboard()
        )
        await UserStates.game_process.set()
    
    elif game_choice == 'dice':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞
        dice_msg = await bot.send_dice(callback_query.message.chat.id)
        dice_value = dice_msg.dice.value
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        state_data = await state.get_data()
        result = await games.play_dice(
            user_id, 
            dice_value, 
            bet_amount, 
            game_mode == 'demo_mode'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        await asyncio.sleep(2)
        
        if result['win']:
            win_amount = bet_amount * result['multiplier']
            result_text = lang.get_message('you_win', user_language).format(amount=win_amount)
        else:
            result_text = lang.get_message('you_lose', user_language).format(amount=bet_amount)
        
        await bot.send_message(
            callback_query.message.chat.id,
            result_text,
            reply_markup=kb.after_game_keyboard(user_language)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if game_mode == 'demo_mode':
            new_balance = db.get_demo_balance(user_id)
        else:
            new_balance = db.get_real_balance(user_id)
            
        balance_text = lang.get_message(
            'demo_balance' if game_mode == 'demo_mode' else 'real_balance', 
            user_language
        )
        await bot.send_message(
            callback_query.message.chat.id,
            f"{balance_text}: ${new_balance:.2f}"
        )
        
        await state.finish()
    
    elif game_choice == 'wheel':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–ª–µ—Å–∞ —É–¥–∞—á–∏
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=lang.get_message('wheel_spinning', user_language)
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
        await asyncio.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        state_data = await state.get_data()
        result = await games.play_wheel_of_fortune(
            user_id, 
            bet_amount, 
            game_mode == 'demo_mode'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['win']:
            win_amount = bet_amount * result['multiplier']
            result_text = lang.get_message('wheel_win', user_language).format(
                amount=win_amount, multiplier=result['multiplier']
            )
        else:
            result_text = lang.get_message('wheel_lose', user_language).format(amount=bet_amount)
        
        await bot.send_message(
            callback_query.message.chat.id,
            result_text,
            reply_markup=kb.after_game_keyboard(user_language)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if game_mode == 'demo_mode':
            new_balance = db.get_demo_balance(user_id)
        else:
            new_balance = db.get_real_balance(user_id)
            
        balance_text = lang.get_message(
            'demo_balance' if game_mode == 'demo_mode' else 'real_balance', 
            user_language
        )
        await bot.send_message(
            callback_query.message.chat.id,
            f"{balance_text}: ${new_balance:.2f}"
        )
        
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –≤ –∏–≥—Ä–µ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
@dp.callback_query_handler(lambda c: c.data.startswith('number_'), state=UserStates.game_process)
async def process_guess_number(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    chosen_number = int(callback_query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    game_mode = state_data.get('game_mode')
    bet_amount = state_data.get('bet_amount')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('processing', user_language)
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    result = await games.play_guess_number(
        user_id, 
        chosen_number, 
        bet_amount, 
        game_mode == 'demo_mode'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result['win']:
        result_text = lang.get_message('guess_win', user_language).format(
            number=result['winning_number'], amount=bet_amount*2
        )
    else:
        result_text = lang.get_message('guess_lose', user_language).format(
            chosen=chosen_number, winning=result['winning_number'], amount=bet_amount
        )
    
    await bot.send_message(
        callback_query.message.chat.id,
        result_text,
        reply_markup=kb.after_game_keyboard(user_language)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if game_mode == 'demo_mode':
        new_balance = db.get_demo_balance(user_id)
    else:
        new_balance = db.get_real_balance(user_id)
        
    balance_text = lang.get_message(
        'demo_balance' if game_mode == 'demo_mode' else 'real_balance', 
        user_language
    )
    await bot.send_message(
        callback_query.message.chat.id,
        f"{balance_text}: ${new_balance:.2f}"
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –∏–≥—Ä–µ "–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞"
@dp.callback_query_handler(lambda c: c.data in ['heads', 'tails'], state=UserStates.game_process)
async def process_coin_flip(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    chosen_side = callback_query.data
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    game_mode = state_data.get('game_mode')
    bet_amount = state_data.get('bet_amount')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('flipping_coin', user_language)
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    result = await games.play_coin_flip(
        user_id, 
        chosen_side, 
        bet_amount, 
        game_mode == 'demo_mode'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result['win']:
        result_text = lang.get_message('coin_win', user_language).format(
            side=lang.get_message(result['result'], user_language), 
            amount=bet_amount*2
        )
    else:
        result_text = lang.get_message('coin_lose', user_language).format(
            chosen=lang.get_message(chosen_side, user_language),
            result=lang.get_message(result['result'], user_language), 
            amount=bet_amount
        )
    
    await bot.send_message(
        callback_query.message.chat.id,
        result_text,
        reply_markup=kb.after_game_keyboard(user_language)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if game_mode == 'demo_mode':
        new_balance = db.get_demo_balance(user_id)
    else:
        new_balance = db.get_real_balance(user_id)
        
    balance_text = lang.get_message(
        'demo_balance' if game_mode == 'demo_mode' else 'real_balance', 
        user_language
    )
    await bot.send_message(
        callback_query.message.chat.id,
        f"{balance_text}: ${new_balance:.2f}"
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –∏–≥—Ä–µ "–ù–∞–π–¥–∏ –∫–∞—Ä—Ç—É"
@dp.callback_query_handler(lambda c: c.data.startswith('card_'), state=UserStates.game_process)
async def process_find_card(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    chosen_card = int(callback_query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    game_mode = state_data.get('game_mode')
    bet_amount = state_data.get('bet_amount')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('revealing_cards', user_language)
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    result = await games.play_find_card(
        user_id, 
        chosen_card, 
        bet_amount, 
        game_mode == 'demo_mode'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result['win']:
        result_text = lang.get_message('card_win', user_language).format(
            card=result['winning_card'], amount=bet_amount*3
        )
    else:
        result_text = lang.get_message('card_lose', user_language).format(
            chosen=chosen_card, winning=result['winning_card'], amount=bet_amount
        )
    
    await bot.send_message(
        callback_query.message.chat.id,
        result_text,
        reply_markup=kb.after_game_keyboard(user_language)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if game_mode == 'demo_mode':
        new_balance = db.get_demo_balance(user_id)
    else:
        new_balance = db.get_real_balance(user_id)
        
    balance_text = lang.get_message(
        'demo_balance' if game_mode == 'demo_mode' else 'real_balance', 
        user_language
    )
    await bot.send_message(
        callback_query.message.chat.id,
        f"{balance_text}: ${new_balance:.2f}"
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query_handler(lambda c: c.data == 'profile')
async def process_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = db.get_user_data(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = lang.get_message('profile_title', user_language) + "\n\n"
    profile_text += f"ID: {user_id}\n"
    profile_text += f"{lang.get_message('demo_balance', user_language)}: ${user_data.get('demo_balance', 0):.2f}\n"
    profile_text += f"{lang.get_message('real_balance', user_language)}: ${user_data.get('real_balance', 0):.2f}\n"
    profile_text += f"{lang.get_message('games_played', user_language)}: {user_data.get('games_played', 0)}\n"
    profile_text += f"{lang.get_message('wins', user_language)}: {user_data.get('wins', 0)}\n"
    profile_text += f"{lang.get_message('losses', user_language)}: {user_data.get('losses', 0)}\n"
    profile_text += f"{lang.get_message('total_won', user_language)}: ${user_data.get('total_won', 0):.2f}\n"
    profile_text += f"{lang.get_message('total_lost', user_language)}: ${user_data.get('total_lost', 0):.2f}\n"
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=profile_text,
        reply_markup=kb.back_to_menu_keyboard(user_language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'deposit')
async def process_deposit(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    deposit_text = lang.get_message('deposit_instruction', user_language)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=deposit_text,
        reply_markup=kb.deposit_amounts_keyboard(user_language)
    )

# –í—ã–±–æ—Ä —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('deposit_'))
async def process_deposit_amount(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    amount = float(callback_query.data.split('_')[1])
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoCloud
    payment_url = await payment.create_invoice(user_id, amount)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    payment_text = lang.get_message('payment_link', user_language)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=payment_text,
        reply_markup=kb.payment_keyboard(payment_url, user_language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–æ–¥"
@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def process_withdraw(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    real_balance = db.get_real_balance(user_id)
    
    if real_balance < 50:
        insufficient_text = lang.get_message('insufficient_withdraw', user_language).format(min_amount=50)
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=insufficient_text,
            reply_markup=kb.back_to_menu_keyboard(user_language)
        )
        return
    
    withdraw_text = lang.get_message('withdraw_instruction', user_language).format(balance=real_balance)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=withdraw_text,
        reply_markup=kb.withdraw_keyboard(user_language)
    )
    
    await UserStates.withdraw_amount.set()

# –í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@dp.message_handler(state=UserStates.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_language = db.get_user_language(user_id)
    
    try:
        amount = float(message.text)
        real_balance = db.get_real_balance(user_id)
        
        if amount < 50:
            await message.answer(
                lang.get_message('min_withdraw', user_language).format(min_amount=50),
                reply_markup=kb.back_to_menu_keyboard(user_language)
            )
            await state.finish()
            return
            
        if amount > real_balance:
            await message.answer(
                lang.get_message('insufficient_funds', user_language),
                reply_markup=kb.back_to_menu_keyboard(user_language)
            )
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        await state.update_data(withdraw_amount=amount)
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        await message.answer(lang.get_message('enter_wallet', user_language))
        await UserStates.withdraw_wallet.set()
        
    except ValueError:
        await message.answer(
            lang.get_message('invalid_amount', user_language),
            reply_markup=kb.back_to_menu_keyboard(user_language)
        )
        await state.finish()

# –í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
@dp.message_handler(state=UserStates.withdraw_wallet)
async def process_withdraw_wallet(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_language = db.get_user_language(user_id)
    wallet = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    amount = state_data.get('withdraw_amount')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    withdraw_id = db.add_withdraw_request(user_id, amount, wallet)
    
    # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_real_balance(user_id, -amount)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"–°—É–º–º–∞: ${amount:.2f}\n"
            f"–ö–æ—à–µ–ª–µ–∫: {wallet}\n"
            f"ID –∑–∞–ø—Ä–æ—Å–∞: {withdraw_id}",
            reply_markup=kb.admin_withdraw_keyboard(withdraw_id)
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        lang.get_message('withdraw_success', user_language).format(amount=amount),
        reply_markup=kb.back_to_menu_keyboard(user_language)
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query_handler(lambda c: c.data == 'support')
async def process_support(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    support_text = lang.get_message('support_instruction', user_language)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=support_text,
        reply_markup=kb.back_to_menu_keyboard(user_language)
    )
    
    await UserStates.support.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(state=UserStates.support)
async def process_support_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_language = db.get_user_language(user_id)
    support_message = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    message_id = db.add_support_message(user_id, support_message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {support_message}\n"
            f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}",
            reply_markup=kb.admin_support_keyboard(user_id, message_id)
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        lang.get_message('support_success', user_language),
        reply_markup=kb.back_to_menu_keyboard(user_language)
    )
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'back_to_menu', state='*')
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    await state.finish()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu_text = lang.get_message('main_menu', user_language)
    demo_balance = db.get_demo_balance(user_id)
    real_balance = db.get_real_balance(user_id)
    
    menu_text += f"\n\n{lang.get_message('demo_balance', user_language)}: ${demo_balance:.2f}"
    menu_text += f"\n{lang.get_message('real_balance', user_language)}: ${real_balance:.2f}"
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=menu_text,
        reply_markup=kb.main_menu_keyboard(user_language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
@dp.callback_query_handler(lambda c: c.data == 'play_again')
async def play_again(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_language = db.get_user_language(user_id)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=lang.get_message('select_mode', user_language),
        reply_markup=kb.game_mode_keyboard(user_language)
    )

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    await message.answer(
        "üéÆ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ BetSmileBot\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.admin_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def process_admin_actions(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    action = callback_query.data.split('_')[1]
    
    if action == 'users':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.get_all_users()
        
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_text += f"ID: {user['id']}\n"
            users_text += f"–î–µ–º–æ –±–∞–ª–∞–Ω—Å: ${user['demo_balance']:.2f}\n"
            users_text += f"–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user['real_balance']:.2f}\n"
            users_text += f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user['games_played']}\n"
            users_text += "---------\n"
        
        users_text += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=users_text,
            reply_markup=kb.admin_back_keyboard()
        )
    
    elif action == 'stats':
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
        stats = db.get_game_stats()
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:\n\n"
        stats_text += f"–í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}\n"
        stats_text += f"–í—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_wins']} ({stats['win_percentage']:.2f}%)\n"
        stats_text += f"–ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: {stats['total_losses']} ({stats['loss_percentage']:.2f}%)\n\n"
        
        stats_text += "–ü–æ –∏–≥—Ä–∞–º:\n"
        for game, count in stats['games'].items():
            stats_text += f"- {game}: {count} –∏–≥—Ä\n"
        
        stats_text += f"\n–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats['total_profit']:.2f}"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=stats_text,
            reply_markup=kb.admin_back_keyboard()
        )
    
    elif action == 'withdrawals':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥
        withdrawals = db.get_pending_withdrawals()
        
        withdraw_text = "üí∏ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
        
        if not withdrawals:
            withdraw_text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥."
        else:
            for withdraw in withdrawals:
                withdraw_text += f"ID –∑–∞–ø—Ä–æ—Å–∞: {withdraw['id']}\n"
                withdraw_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {withdraw['user_id']}\n"
                withdraw_text += f"–°—É–º–º–∞: ${withdraw['amount']:.2f}\n"
                withdraw_text += f"–ö–æ—à–µ–ª–µ–∫: {withdraw['wallet']}\n"
                withdraw_text += f"–°—Ç–∞—Ç—É—Å: {withdraw['status']}\n"
                withdraw_text += f"–î–∞—Ç–∞: {withdraw['date']}\n"
                withdraw_text += "---------\n"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=withdraw_text,
            reply_markup=kb.admin_back_keyboard()
        )
    
    elif action == 'add_balance':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
            reply_markup=kb.admin_back_keyboard()
        )
        await UserStates.admin_add_balance_user.set()
    
    elif action == 'settings':
        settings = db.get_settings()
        
        settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
        settings_text += f"–î–µ–º–æ —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {settings['demo_win_chance']}%\n"
        settings_text += f"–†–µ–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {settings['real_win_chance']}%\n"
        settings_text += f"–ú–∞–∫—Å. –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥: {settings['max_consecutive_wins']}\n"
        settings_text += f"–ü–æ–¥–æ–≥—Ä–µ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö: {settings['warm_up_wins']} –ø–æ–±–µ–¥\n"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=settings_text,
            reply_markup=kb.admin_settings_keyboard()
        )
    
    elif action == 'back':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="üéÆ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ BetSmileBot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.admin_menu_keyboard()
        )

# –í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=UserStates.admin_add_balance_user)
async def admin_add_balance_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not db.user_exists(user_id):
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.admin_cancel_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(target_user_id=user_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            reply_markup=kb.admin_cancel_keyboard()
        )
        
        await UserStates.admin_add_balance_amount.set()
        
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=kb.admin_cancel_keyboard()
        )

# –í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=UserStates.admin_add_balance_amount)
async def admin_add_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        user_id = state_data.get('target_user_id')
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        db.update_real_balance(user_id, amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_language = db.get_user_language(user_id)
        await bot.send_message(
            user_id,
            lang.get_message('admin_added_balance', user_language).format(amount=amount)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount:.2f}",
            reply_markup=kb.admin_back_inline_keyboard()
        )
        
        await state.finish()
        
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=kb.admin_cancel_keyboard()
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
@dp.callback_query_handler(lambda c: c.data.startswith('withdraw_'))
async def process_withdraw_decision(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    action, withdraw_id = callback_query.data.split('_')[1:3]
    withdraw_id = int(withdraw_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    withdraw_data = db.get_withdraw_request(withdraw_id)
    
    if not withdraw_data:
        await bot.answer_callback_query(callback_query.id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if withdraw_data['status'] != 'pending':
        await bot.answer_callback_query(callback_query.id, "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return
    
    target_user_id = withdraw_data['user_id']
    amount = withdraw_data['amount']
    user_language = db.get_user_language(target_user_id)
    
    if action == 'approve':
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        db.update_withdraw_status(withdraw_id, 'approved')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            target_user_id,
            lang.get_message('withdraw_approved', user_language).format(amount=amount)
        )
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{withdraw_id} –Ω–∞ —Å—É–º–º—É ${amount:.2f} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
        )
    
    elif action == 'reject':
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        db.update_withdraw_status(withdraw_id, 'rejected')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        db.update_real_balance(target_user_id, amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            target_user_id,
            lang.get_message('withdraw_rejected', user_language).format(amount=amount)
        )
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{withdraw_id} –Ω–∞ —Å—É–º–º—É ${amount:.2f} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('support_reply_'))
async def process_support_reply(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    target_user_id = int(callback_query.data.split('_')[2])
    message_id = int(callback_query.data.split('_')[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(target_user_id=target_user_id, message_id=message_id)
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:",
        reply_markup=kb.admin_cancel_keyboard()
    )
    
    await UserStates.admin_support_reply.set()

# –í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(state=UserStates.admin_support_reply)
async def admin_support_reply(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS:
        await state.finish()
        return
    
    reply_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    target_user_id = state_data.get('target_user_id')
    message_id = state_data.get('message_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
    db.update_support_message_status(message_id, 'answered')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    db.add_support_reply(message_id, admin_id, reply_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_language = db.get_user_language(target_user_id)
    await bot.send_message(
        target_user_id,
        lang.get_message('support_reply', user_language).format(message=reply_text)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=kb.admin_back_inline_keyboard()
    )
    
    await state.finish()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_payments_callback():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
    invoices = db.get_pending_invoices()
    
    for invoice in invoices:
        invoice_id = invoice['invoice_id']
        user_id = invoice['user_id']
        amount = invoice['amount']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
        status = await payment.check_invoice(invoice_id)
        
        if status == 'paid':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
            db.update_invoice_status(invoice_id, 'paid')
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.update_real_balance(user_id, amount)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_language = db.get_user_language(user_id)
            await bot.send_message(
                user_id,
                lang.get_message('payment_success', user_language).format(amount=amount)
            )

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def scheduled_tasks():
    while True:
        await check_payments_callback()
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–¥–∞–ª—è–µ–º)
@dp.message_handler()
async def delete_message(message: types.Message):
    await message.delete()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(scheduled_tasks())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "üéÆ –ë–æ—Ç BetSmileBot –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
